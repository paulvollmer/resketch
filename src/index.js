const pkg = require('../package.json')
const fs = require('fs');
const path = require('path')
const Sketch = require('node-sketch');

function Sketchy(dir) {
  console.log("==> Run Sketchy at", dir)

  const files = fs.readdirSync(dir)
  files.forEach(filename => {
    const ext = path.extname(filename)
    if (ext === ".sketch") {
      processSketchFile(path.join(dir, filename))
    }
  });
}

function processSketchFile(filename) {
  Sketch.read(filename).then(sketch => {
    let allSymbols = sketch.symbolsPage.getAll('symbolMaster');
    let code = [
      `//`,
      `// generated by ${pkg.name} v${pkg.version}`,
      `//`,
      ``,
      `import React from 'react'`,
      `// import './Button.css'`,
      ``,
    ]
    let codeExport = [`export default {`]
    allSymbols.forEach(symbol => {
      code.push(generateFunctionalComponent(symbol))
      codeExport.push(`  ${symbol.name},`)
    });
    codeExport.push('}')

    console.log('\n\n', code.join('\n'));
    console.log('\n\n', codeExport.join('\n'));
    fs.writeFileSync(filename.replace('sketch', 'js'), code.join('\n')+codeExport.join('\n'))

  })
  .catch(err => {
    console.log('ERROR', err);
    process.exit(1);
  })
}

function generateFunctionalComponent(symbol) {
  console.log(`Symbol: ${symbol.name}`);
  console.log(`  position: ${symbol.frame.x}, ${symbol.frame.y}`);
  console.log(`  size: ${symbol.frame.width}, ${symbol.frame.height}`);

  let code = [
    `const ${symbol.name} = (props) => {`,
    `  return(`,
    `    <div className='${symbol.name}'>`,
  ]

  symbol.layers.forEach(layer => {
    console.log(layer._class, JSON.stringify(layer.name, '', '  '));
    switch (layer._class) {
      case 'shapeGroup':
        console.log('===============', layer.style.fills[0].color);
        const red = colorTransform(layer.style.fills[0].color.red)
        const green = colorTransform(layer.style.fills[0].color.green)
        const blue = colorTransform(layer.style.fills[0].color.blue)
        const alpha = colorTransform(layer.style.fills[0].color.alpha)
        code.push(`    <div style={{
          backgroundColor: 'rgba(${red},${green},${blue},${alpha})',
          width: '${layer.frame.width}px',
          height: '${layer.frame.height}px',
        }}>${layer._class}</div>`) //JSON.stringify(layer,'','  ')
        break;
      case 'text':
        code.push(`    <p>${layer._class} -- ${layer.name}</p>`)
        break;
      default:
        code.push(`    <p>${layer._class} -- ${layer.name}</p>`)
    }

  });

  code.push(`      ${symbol.name}`)
  code.push(`    </div>`)
  code.push(`  )`)
  code.push(`}`)
  code.push(``)
  return code.join('\n')
}

function colorTransform(f) {
  return (f >= 1.0 ? 255 : (f <= 0.0 ? 0 : Math.floor(f * 256.0)))
  // f2 = max(0.0, min(1.0, color))
  // b = floor(f2 == 1.0 ? 255 : f2 * 256.0)
  // return b
}

module.exports = Sketchy
